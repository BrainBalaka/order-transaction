#serverless configuration
service: order-transaction

#package config

#provider config:
provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: ap-southeast-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "arn:aws:dynamodb:ap-southeast-1:*"

#functions:
functions:
  createOrder:
    handler: handler.createOrder
    events:
        - http:
            path: orders
            method: POST
            cors: true
  getOrder:
    handler: handler.getOrder
    events:
        - http:
            path: orders/{id}
            method: GET
            cors: true
  addProductOrder:
    handler: handler.addProductOrder
    events:
        - http:
            path: orders/{id}/products
            method: POST
            cors: true
  updateOrder:
    handler: handler.updateOrder
    events:
        - http:
            path: orders/{id}
            method: PUT
            cors: true
  submitOrder:
    handler: handler.submitOrder
    events:
        - http:
            path: submit-order/{id}
            method: PUT
            cors: true
  getSubmitedOrder:
    handler: handler.getSubmitedOrder
    events:
        - http:
            path: submitted-orders
            method: GET
            cors: true
  createShipment:
    handler: handler.createShipment
    events:
        - http:
            path: orders/{id}/shipments
            method: POST
            cors: true
  updateShipment:
    handler: handler.shipments.updateShipment
    events:
        - http:
            path: shipments/{shipmentId}
            method: PUT
            cors: true
  getShipment:
    handler: handler.shipments.getShipment
    events:
        - http:
            path: shipments/{shipmentId}
            method: GET
            cors: true

#resources configuration
resources:
  Resources:
    OrderDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'order'
    ProductDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'product'
    CouponDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'coupon'
    ShipmentDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: 'shipment'
